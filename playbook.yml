---
- name: Deploy servers
  hosts: localhost
  tags: always

  vars_files:
    - environments/{{ env }}/group_vars/rax.yml

  tasks:
    - name: Ensure web servers
      rax:
        wait: yes
        name: "{{ web.name }}"
        auto_increment: yes
        image: "{{ web.image }}"
        flavor: "{{ web.flavor }}"
        region: "{{ web.region|default('IAD') }}"
        group: "{{ web.group|default('web') }}"
        key_name: "{{ web.key_name }}"
        count: "{{ web.count|default(1) }}"
        exact_count: yes
      register: web_servers

    - name: Register new web hosts
      add_host:
        hostname: "{{ item.name }}"
        ansible_host: "{{ item.rax_accessipv4 }}"
        ansible_ssh_host: "{{ item.rax_accessipv4 }}"
        groups: "{{ web.group|default('web') }}"
      with_items: "{{ web_servers.success }}"
      when: web_servers.action == 'create'

# When the servers are first created, the SSH key is associated with the root
# user. The pygotham user needs to be created and given the necessary SSH keys.
- name: Add remote user
  hosts: "{{ web.group|default('web') }}"
  vars:
    ansible_user: root
  tags: initial

  vars_files:
    - environments/{{ env }}/group_vars/rax.yml

  tasks:
    - name: Generate a random password
      shell: openssl rand -base64 32
      register: passwd

    - name: Add user
      user:
        name: pygotham
        password: "{{ passwd.stdout }}"
        state: present
        shell: /bin/bash

    - name: Ensure ssh keys
      authorized_key:
        user: pygotham
        key: https://github.com/{{ item }}.keys
      with_items:
        - dirn
        - jonafato

    - name: Remove sudo group writes
      lineinfile:
        dest: /etc/sudoers
        regexp: ^%sudo
        state: absent

    - name: Add user to sudoers
      lineinfile:
        dest: /etc/sudoers
        regexp: pygotham ALL
        line: "pygotham ALL=(ALL) NOPASSWD: ALL"
        state: present

- name: Configure access
  hosts: "{{ web.group|default('web') }}"
  tags: always

  vars_files:
    - environments/{{ env }}/group_vars/rax.yml

  tasks:
    # TODO: Fetch host keys

    # Even though this is done in the previous play, the SSH keys are set again
    # here to ensure that new SSH keys will be added.
    - name: Ensure SSH keys
      authorized_key:
        user: pygotham
        key: https://github.com/{{ item }}.keys
      with_items:
        - dirn
        - jonafato

- name: Secure servers
  # hosts: "{{ env }}"
  hosts: "{{ web.group|default('web') }}"
  become: yes
  tags: secure

  vars_files:
    - environments/{{ env }}/group_vars/rax.yml

  roles:
    - role: dev-sec.os-hardening
      os_ignore_users:
        - pygotham

    # - dev-sec.ssh-hardening

    - role: ANXS.fail2ban
      fail2ban_services:
        - name: ssh
          enabled: yes
          port: ssh
          filter: sshd
          logpath: /var/log/auth.log
          maxretry: 5

  tasks:
    - name: Deny everything by default
      ufw:
        state: reloaded
        policy: deny

    - name: Allow SSH
      ufw:
        rule: allow
        port: 22
        proto: tcp

- name: Configure web servers
  hosts: "{{ web.group|default('web') }}"
  tags: web

  vars_files:
    - environments/{{ env }}/group_vars/rax.yml
    - environments/{{ env }}/group_vars/web.yml

  tasks:
    - name: Ensure apt repositories
      apt_repository:
        repo: "{{ item }}"
      with_items: "{{ apt.repositories }}"
      become: yes

    - name: Update apt
      apt:
        update_cache: yes
      become: yes

    - name: Ensure software
      apt:
        name: "{{ item }}"
        state: latest
      with_items: "{{ apt.packages }}"
      become: yes


- name: Fetch website sources
  hosts: "{{ web.group|default('web') }}"
  tags: web
  gather_facts: yes

  vars_files:
    - environments/{{ env }}/group_vars/rax.yml
    - environments/{{ env }}/group_vars/web.yml

  tasks:
    - name: Ensure site source dir
      file:
        path: /home/pygotham/pygotham.org
        state: directory

    - name: Ensure html sources
      git:
        repo: "{{ item.src }}"
        dest: /home/pygotham/pygotham.org/{{ item.domain }}.{{ web_domains.domain }}
        accept_hostkey: yes
        force: yes
      with_items: "{{ web_domains.subdomains|selectattr('type', 'equalto', 'html')|list }}"
      become: yes

    - name: Ensure jekyll sources
      git:
        repo: "{{ item.src }}"
        dest: /tmp/{{ item.domain }}.{{ web_domains.domain }}
        accept_hostkey: yes
      with_items: "{{ web_domains.subdomains|selectattr('type', 'equalto', 'jekyll')|list }}"
      tags: jekyll

    - name: Ensure bundler
      command: gem install bundler
      become: yes
      tags: jekyll

    - name: Ensure jekyll requirements
      bundler:
        chdir: /tmp/{{ item.domain }}.{{ web_domains.domain }}
        state: present
      with_items: "{{ web_domains.subdomains|selectattr('type', 'equalto', 'jekyll')|list }}"
      become: yes
      tags: jekyll

    - name: Build jekyll artifacts
      command: bundle exec jekyll build --destination /home/pygotham/pygotham.org/{{ item.domain }}.{{ web_domains.domain }}
      args:
        chdir: /tmp/{{ item.domain }}.{{ web_domains.domain }}
      with_items: "{{ web_domains.subdomains|selectattr('type', 'equalto', 'jekyll')|list }}"
      become: yes
      tags: jekyll

    - name: Ensure proper file permissions
      file:
        path: /home/pygotham/pygotham.org  # /{{ item.domain }}.{{ web_domains.domain }}
        owner: www-data
        group: www-data
        mode: 0755
        recurse: yes
      # with_items: "{{ web_domains.subdomains }}"
      become: yes


- name: Configure nginx
  hosts: "{{ web.group|default('web') }}"
  tags: web
  become: yes

  vars_files:
    - environments/{{ env }}/group_vars/rax.yml
    - environments/{{ env }}/group_vars/web.yml

  tasks:
    - name: Write default nginx config
      template:
        src: files/nginx/default
        dest: /etc/nginx/sites-available/default
        owner: www-data
        group: www-data
      vars:
        subdomains: "{{ web_domains.subdomains|map(attribute='domain')|list }}"
        domain: "{{ web_domains.domain }}"

    - name: Link default nginx config
      file:
        src: /etc/nginx/sites-available/default
        dest: /etc/nginx/sites-enabled/default
        state: link
        owner: www-data
        group: www-data
      notify: Reload nginx

    - name: Ensure letsencrypt challenge directory
      file:
        path: /srv/letsencrypt-auto
        owner: www-data
        group: www-data
        state: directory
        recurse: yes
      tags: certbot

    - name: Certbot first run
      args:
        creates: /etc/letsencrypt/live/{{ web_domains.domain }}.conf
      tags: certbot
      notify: Reload nginx
      command: >
        certbot certonly --non-interactive --agree-tos --webroot --expand
        --webroot-path /srv/letsencrypt-auto/ --post-hook "service nginx reload" --email jon@pygotham.org
        -d {{ web_domains.domain }} -d www.{{ web_domains.domain }}
        {% for subdomain in web_domains.subdomains|map(attribute='domain')|list %} -d {{ subdomain }}.{{ web_domains.domain }}{% endfor %}

    - name: Write full nginx config
      template:
        src: files/nginx/pygotham.org.conf.j2
        dest: /etc/nginx/sites-available/{{ web_domains.domain }}.conf
        owner: www-data
        group: www-data
      vars:
        subdomains: "{{ web_domains.subdomains|map(attribute='domain')|list }}"
        domain: "{{ web_domains.domain }}"

    - name: Link nginx config
      file:
        src: /etc/nginx/sites-available/{{ web_domains.domain }}.conf
        dest: /etc/nginx/sites-enabled/{{ web_domains.domain }}.conf
        state: link
        owner: www-data
        group: www-data
      notify: Reload nginx

  handlers:
    - name: Reload nginx
      service:
        name: nginx
        state: reloaded
