---
- name: Deploy servers
  hosts: localhost
  gather_facts: no
  tags: always

  vars_files:
    - environments/{{ env }}/group_vars/rax.yml

  tasks:
    - name: Ensure database servers
      rax:
        wait: yes
        name: "{{ database.name }}"
        auto_increment: yes
        image: "{{ database.image }}"
        flavor: "{{ database.flavor }}"
        region: "{{ database.region|default('IAD') }}"
        group: "{{ database.group|default('database') }}"
        key_name: "{{ database.key_name }}"
        count: "{{ database.count|default(1) }}"
        exact_count: yes
      register: database_servers

    - name: Register new database hosts
      add_host:
        hostname: "{{ item.name }}"
        ansible_host: "{{ item.rax_accessipv4 }}"
        ansible_ssh_host: "{{ item.rax_accessipv4 }}"
        groups: "{{ database.group|default('database') }}"
      with_items: "{{ database_servers.success }}"
      when: database_servers.action == 'create'

    - name: Ensure web servers
      rax:
        wait: yes
        name: "{{ web.name }}"
        auto_increment: yes
        image: "{{ web.image }}"
        flavor: "{{ web.flavor }}"
        region: "{{ web.region|default('IAD') }}"
        group: "{{ web.group|default('web') }}"
        key_name: "{{ web.key_name }}"
        count: "{{ web.count|default(1) }}"
        exact_count: yes
      register: web_servers

    - name: Register new web hosts
      add_host:
        hostname: "{{ item.name }}"
        ansible_host: "{{ item.rax_accessipv4 }}"
        ansible_ssh_host: "{{ item.rax_accessipv4 }}"
        groups: "{{ web.group|default('database') }}"
      with_items: "{{ web_servers.success }}"
      when: web_servers.action == 'create'

- name: Configure access
  hosts: "{{ env }}"
  remote_user: root
  gather_facts: no
  tags: always

  vars_files:
    - environments/{{ env }}/group_vars/rax.yml

  tasks:
    # TODO: Fetch host keys

    - name: Ensure SSH keys
      authorized_key:
        user: root
        key: https://github.com/{{ item }}.keys
      with_items:
        - dirn
        - jonafato

- name: Secure servers
  hosts: "{{ env }}"
  remote_user: root
  tags: secure

  roles:
    # - role: hardening.os-hardening
    #   os_ignore_users:
    #     - postgres

    - role: hardening.ssh-hardening
      ssh_allow_root_with_key: true

  tasks:
    - name: Deny everything by default
      ufw:
        state: reloaded
        policy: deny

    - name: Allow SSH
      ufw:
        rule: allow
        port: 22
        proto: tcp

- name: Configure database servers
  hosts: "{{ database.group|default('database') }}"
  remote_user: root
  tags: database

  vars_files:
    - environments/{{ env }}/group_vars/rax.yml
    - environments/{{ env }}/group_vars/secrets.yml

  roles:
    - role: ANXS.postgresql
      postgresql_version: 9.5
      postgresql_default_auth_method: md5
      postgresql_listen_addresses: '*'
      postgresql_pg_hba_default:
        - type: local
          database: all
          user: "{{ postgresql_admin_user }}"
          address: ''
          method: peer
        - type: local
          database: all
          user: all
          address: ''
          method: peer
        - type: host
          database: all
          user: all
          address: 127.0.0.1/32
          method: "{{ postgresql_default_auth_method }}"
        - type: host
          database: all
          user: all
          address: ::1/128
          method: "{{ postgresql_default_auth_method }}"
        - type: host
          database: all
          user: all
          address: 0.0.0.0/0
          method: "{{ postgresql_default_auth_method }}"
        - type: host
          database: all
          user: all
          address: ::0/0
          method: "{{ postgresql_default_auth_method }}"
      postgresql_databases:
        - name: "{{ secrets.db.name }}"
          hstore: yes
      postgresql_database_extensions:
        - db: "{{ secrets.db.name }}"
          extensions:
            - hstore
      postgresql_users:
        - name: "{{ secrets.db.user }}"
          pass: "{{ secrets.db.pass }}"
          encrypted: no
      postgresql_user_privileges:
        - name: "{{ secrets.db.user }}"
          db: "{{ secrets.db.name }}"
          priv: ALL
          role_attr_flags: NOSUPERUSER,NOCREATEDB

  tasks:
    # TODO: Only allow in-network traffic
    - name: Allow Postgres
      ufw:
        rule: allow
        port: 5432
        proto: tcp

- name: Configure web servers
  hosts: "{{ web.group|default('web') }}"
  remote_user: root
  tags: web

  vars_files:
    - environments/{{ env }}/group_vars/rax.yml
    - environments/{{ env }}/group_vars/secrets.yml
    - environments/{{ env }}/group_vars/web.yml

  roles:
    - angstwad.docker_ubuntu

  tasks:
    - name: Ensure vhost directory exists
      file:
        path: ~/nginx/vhost.d
        state: directory

    - name: Add the nginx vhost template
      copy:
        src: files/nginx/vhost
        dest: ~/nginx/vhost.d/{{ web_domain }}

    - name: Add the nginx vhost location template
      copy:
        src: files/nginx/vhost_location
        dest: ~/nginx/vhost.d/{{ web_domain }}_location

    - name: Start the nginx container
      docker:
        name: nginx
        # image: jwilder/nginx-proxy
        image: quay.io/pygotham/nginx-proxy
        state: reloaded
        pull: always
        ports:
          - 80:80
          - 443:443
        volumes:
          - /var/run/docker.sock:/tmp/docker.sock:ro
          - /root/nginx/certs:/etc/nginx/certs:ro
          - /root/nginx/html:/usr/share/nginx/html
          - /root/nginx/vhost.d:/etc/nginx/vhost.d

    - name: Start the letsencrypt container
      docker:
        name: letsencrypt
        image: jrcs/letsencrypt-nginx-proxy-companion
        state: reloaded
        pull: always
        env:
          NGINX_DOCKER_GEN_CONTAINER: nginx
        volumes:
          - /root/nginx/certs:/etc/nginx/certs:rw
          - /var/run/docker.sock:/var/run/docker.sock:ro
        volumes_from:
          - nginx

    - name: Start the PyGotham container
      docker:
        name: pygotham
        image: quay.io/pygotham/pygotham
        state: reloaded
        pull: always
        env:
          DATABASE_URL: postgresql://{{ secrets.db.user }}:{{ secrets.db.pass }}@{{ hostvars[groups[database.group|default('database')][0]]['rax_addresses']['private'][0]['addr'] }}/{{ secrets.db.name }}
          DEBUG: True
          LETSENCRYPT_EMAIL: webmaster@{{ web_domain }}
          LETSENCRYPT_HOST: "{{ web_domain }}"
          SECRET_KEY: "{{ secrets.web.SECRET_KEY }}"
          SECURITY_PASSWORD_SALT: "{{ secrets.web.SECURITY_PASSWORD_SALT }}"
          SENTRY_DSN: "{{ secrets.web.SENTRY_DSN }}"
          VIRTUAL_HOST: "{{ web_domain }}"
          VIRTUAL_PROTO: uwsgi
        ports:
          - 9000
